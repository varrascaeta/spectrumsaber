x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.2}
  build:
    context: .
    dockerfile: containers/airflow.Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    AIRFLOW_CONFIG: '/app/project/src/airflow/config/airflow.cfg'
  volumes:
    - type: bind
      source: .
      target: /app/project
  env_file:
    - environments/production.env
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:
  # Spectrumsaber Project
  spectrumsaber:
    profiles:
      - app
      - spectrumsaber
    container_name: spectrumsaber-app
    image: spectrumsaber:latest
    command: bash -c "python service/manage.py runserver 0.0.0.0:8000"
    env_file:
      - environments/production.env
    volumes:
      - .:/app/project/
    ports:
      - "8000:8000"
    depends_on:
      - spectrumsaber-db
      - spectrumsaber-setup
    links:
      - spectrumsaber-db:spectrumsaber-db
    networks:
      - spectrumsabernetwork
    
  spectrumsaber-setup:
    profiles:
      - app
      - spectrumsaber
    container_name: spectrumsaber-setup
    image: spectrumsaber:latest
    build:
      context: .
      dockerfile: containers/app.Dockerfile
    command: bash -c "sleep 5 && python service/manage.py migrate"
    env_file:
      - environments/production.env
    volumes:
      - .:/app/project/
    depends_on:
      - spectrumsaber-db
    links:
      - spectrumsaber-db:spectrumsaber-db
    networks:
      - spectrumsabernetwork

  # Spectrumsaber Database
  spectrumsaber-db:
    profiles:
      - app
      - db
      - spectrumsaber
    container_name: spectrumsaber-db
    image: spectrumsaber-db:latest
    build:
      context: .
      dockerfile: containers/db.Dockerfile
    volumes:
      - spectrumsaber-db-data:/var/lib/postgresql/data
      - .:/app/project/
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
    ports:
      - "5433:5432"
    networks:
      - spectrumsabernetwork

  # Spectrumsaber test database
  test-db:
    profiles:
      - testing
    image: 'postgres:16'
    restart: always
    ports:
    - '9432:5432'

  # Spectrumsaber test app
  spectrumsaber-test:
    profiles:
      - testing
    container_name: spectrumsaber-test
    network_mode: "host"
    image: spectrumsaber:latest
    volumes:
      - .:/app/project/
    env_file:
      - environments/testing.env
    depends_on:
      - test-db
    entrypoint: bash .app/containers/tests/tests.sh

  # Airflow database
  postgres:
    profiles:
      - airflow
      - spectrumsaber
    image: postgres:13
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - spectrumsabernetwork

  # Airflow cache
  redis:
    profiles:
      - airflow
      - spectrumsaber
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - spectrumsabernetwork

  # Airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    profiles:
      - airflow
      - spectrumsaber
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    env_file:
      - environments/production.env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - spectrumsabernetwork
  
  # Airflow webserver
  airflow-webserver:
    <<: *airflow-common
    profiles:
      - airflow
      - spectrumsaber
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    env_file:
      - environments/production.env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - spectrumsabernetwork
  
  # Airflow worker
  airflow-worker:
    <<: *airflow-common
    profiles:
      - airflow
      - spectrumsaber
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    env_file:
      - environments/production.env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - spectrumsabernetwork
  
  # Airflow triggerer
  airflow-triggerer:
    <<: *airflow-common
    profiles:
      - airflow
      - spectrumsaber
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    env_file:
      - environments/production.env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - spectrumsabernetwork
  
  # Airflow cli
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    env_file:
      - environments/production.env
    command:
      - bash
      - -c
      - airflow
    networks:
      - spectrumsabernetwork
  
  # Airflow init
  airflow-init:
    <<: *airflow-common
    profiles:
      - airflow
      - spectrumsaber
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        echo "Starting Airflow with UID: ${AIRFLOW_UID}"
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    env_file:
      - environments/production.env
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - spectrumsabernetwork


networks:
  spectrumsabernetwork:
    driver: bridge

volumes:
  spectrumsaber-db-data:
  postgres-db-volume: